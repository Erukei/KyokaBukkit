From 4ba923b66166d9d4bf42cac83f113a0571f7b951 Mon Sep 17 00:00:00 2001
From: libhalt <libhalt@libhalt.net>
Date: Sun, 31 Aug 2014 01:43:37 +0900
Subject: [PATCH] API: Allow Objective to be per Team for SideBar purposes


diff --git a/src/main/java/net/minecraft/server/PacketPlayOutScoreboardScore.java b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardScore.java
index 446e308..648dff7 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutScoreboardScore.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardScore.java
@@ -4,8 +4,8 @@ import java.io.IOException;
 
 public class PacketPlayOutScoreboardScore extends Packet {
 
-    private String a = "";
-    private String b = "";
+    public String a = "";
+    public String b = "";
     private int c;
     private int d;
 
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index cc88a3e..8749df3 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -187,6 +187,7 @@ public abstract class PlayerList {
                 while (iterator1.hasNext()) {
                     Packet packet = (Packet) iterator1.next();
 
+                    if(packet instanceof PacketPlayOutScoreboardScore)scoreboardserver.sendPlayer(entityplayer , (PacketPlayOutScoreboardScore) packet);else
                     entityplayer.playerConnection.sendPacket(packet);
                 }
 
diff --git a/src/main/java/net/minecraft/server/ScoreboardObjective.java b/src/main/java/net/minecraft/server/ScoreboardObjective.java
new file mode 100644
index 0000000..bc5ef5b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ScoreboardObjective.java
@@ -0,0 +1,34 @@
+package net.minecraft.server;
+
+public class ScoreboardObjective {
+
+    private final Scoreboard a;
+    private final String b;
+    private final IScoreboardCriteria c;
+    private String d;
+    public boolean isTeamSpecific = false;//Kyoka
+
+    public ScoreboardObjective(Scoreboard scoreboard, String s, IScoreboardCriteria iscoreboardcriteria) {
+        this.a = scoreboard;
+        this.b = s;
+        this.c = iscoreboardcriteria;
+        this.d = s;
+    }
+
+    public String getName() {
+        return this.b;
+    }
+
+    public IScoreboardCriteria getCriteria() {
+        return this.c;
+    }
+
+    public String getDisplayName() {
+        return this.d;
+    }
+
+    public void setDisplayName(String s) {
+        this.d = s;
+        this.a.handleObjectiveChanged(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ScoreboardServer.java b/src/main/java/net/minecraft/server/ScoreboardServer.java
index 1591058..f92f2a1 100644
--- a/src/main/java/net/minecraft/server/ScoreboardServer.java
+++ b/src/main/java/net/minecraft/server/ScoreboardServer.java
@@ -70,6 +70,18 @@ public class ScoreboardServer extends Scoreboard {
     public void removePlayerFromTeam(String s, ScoreboardTeam scoreboardteam) {
         super.removePlayerFromTeam(s, scoreboardteam);
         this.sendAll(new PacketPlayOutScoreboardTeam(scoreboardteam, Arrays.asList(new String[] { s}), 4)); // CraftBukkit - Internal packet method
+        for(ScoreboardObjective objective :  (java.util.Collection<ScoreboardObjective>) getObjectives()){
+            if(objective.isTeamSpecific){
+                PacketPlayOutScoreboardScore packetScoreboardObject = new PacketPlayOutScoreboardScore( getPlayerScoreForObjective(s , objective) ,1);
+                EntityPlayer leaver = a.getPlayerList().getPlayer(s);
+                if(leaver != null)leaver.playerConnection.sendPacket(packetScoreboardObject);
+                for(String string : (java.util.Collection<String>) scoreboardteam.getPlayerNameSet()){
+                    EntityPlayer member = a.getPlayerList().getPlayer(string);
+                    if(member != null)member.playerConnection.sendPacket(packetScoreboardObject);
+                    if(leaver != null && leaver != member)leaver.playerConnection.sendPacket(new PacketPlayOutScoreboardScore( getPlayerScoreForObjective(string , objective) ,1));
+                }
+            }
+        }
         this.b();
     }
 
@@ -158,6 +170,7 @@ public class ScoreboardServer extends Scoreboard {
             while (iterator1.hasNext()) {
                 Packet packet = (Packet) iterator1.next();
 
+                if(packet instanceof PacketPlayOutScoreboardScore)sendPlayer(entityplayer, (PacketPlayOutScoreboardScore) packet);else
                 entityplayer.playerConnection.sendPacket(packet);
             }
         }
@@ -209,6 +222,55 @@ public class ScoreboardServer extends Scoreboard {
 
         return i;
     }
+    //Kyoka start
+    public void sendPlayer(EntityPlayer entityplayer , PacketPlayOutScoreboardScore packet){
+        String playerName = packet.a;
+        String objectName = packet.b;
+        ScoreboardObjective objective = this.getObjective(objectName);
+        if(objective.isTeamSpecific){
+            EntityPlayer owner = a.getPlayerList().getPlayer(playerName);
+            if(owner != null){
+                if(entityplayer.getScoreboardTeam() != null && entityplayer.getScoreboardTeam().equals(owner.getScoreboardTeam())){
+                    entityplayer.playerConnection.sendPacket(packet);
+                }
+            }else{
+                ScoreboardTeam team = entityplayer.getScoreboard().getPlayerTeam(entityplayer.getName());
+                if (team != null &&  team.getPlayerNameSet().contains(playerName)) {
+                    entityplayer.playerConnection.sendPacket(packet);
+                }
+            }
+        }else{
+            entityplayer.playerConnection.sendPacket(packet);
+        }
+    }
+    private void sendAll(PacketPlayOutScoreboardScore packet){
+        String playerName = packet.a;
+        String objectName = packet.b;
+        if(!objectName.isEmpty()) {
+            ScoreboardObjective objective = this.getObjective(objectName);
+            if (objective.isTeamSpecific) {
+                EntityPlayer owner = a.getPlayerList().getPlayer(playerName);
+                if (owner != null) {
+                    for (EntityPlayer entityplayer : (List<EntityPlayer>) this.a.getPlayerList().players) {
+                        if (entityplayer.getScoreboardTeam() != null && entityplayer.getScoreboardTeam().equals(owner.getScoreboardTeam())) {
+                            entityplayer.playerConnection.sendPacket(packet);
+                        }
+                    }
+                } else {
+                    for (EntityPlayer entityplayer : (List<EntityPlayer>) this.a.getPlayerList().players) {
+                        ScoreboardTeam team = entityplayer.getScoreboard().getPlayerTeam(entityplayer.getName());
+                        if (team != null && team.getPlayerNameSet().contains(playerName)) {
+                            entityplayer.playerConnection.sendPacket(packet);
+                        }
+                    }
+                }
+                return;
+            }
+        }
+        sendAll((Packet) packet);
+    }
+    //Kyoka end
+
 
     // CraftBukkit start - Send to players
     private void sendAll(Packet packet) {
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
index 9eaec71..58f60fb 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
@@ -100,6 +100,22 @@ final class CraftObjective extends CraftScoreboardComponent implements Objective
         return new CraftScore(this, entry);
     }
 
+    private final Kyoka kyoka = new Kyoka(){
+        @Override
+        public void setTeamSpecific(boolean specific) {
+            objective.isTeamSpecific = specific;
+        }
+
+        @Override
+        public boolean isTeamSpecific() {
+            return objective.isTeamSpecific;
+        }
+    };
+    @Override
+    public Kyoka kyoka() {
+        return kyoka;
+    }
+
     @Override
     public void unregister() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
-- 
1.9.4.msysgit.1

