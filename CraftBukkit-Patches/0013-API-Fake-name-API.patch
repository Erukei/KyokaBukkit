From c49395dc4c9e5421e48e27f4b7689006c6aaeca6 Mon Sep 17 00:00:00 2001
From: Jamie Shaw <lk@lkay.org>
Date: Fri, 4 Jul 2014 17:26:55 +1000
Subject: [PATCH] API: Fake name API


diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index c148c4d..364c88d 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -6,6 +6,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 
+import net.minecraft.util.com.mojang.authlib.GameProfile;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -319,6 +320,15 @@ public class EntityTrackerEntry {
                     this.trackedPlayers.add(entityplayer);
                     Packet packet = this.c();
 
+                    // Kyoka start
+                    if (packet instanceof PacketPlayOutNamedEntitySpawn) {
+                        EntityPlayer tracked = (EntityPlayer) this.tracker;
+                        GameProfile newProfile = new GameProfile(tracked.getProfile().getId(), tracked.getBukkitEntity().getName(entityplayer.getBukkitEntity()));
+                        newProfile.getProperties().putAll(tracked.getProfile().getProperties());
+                        ((PacketPlayOutNamedEntitySpawn) packet).b = newProfile;
+                    }
+                    // Kyoka end
+
                     entityplayer.playerConnection.sendPacket(packet);
                     if (!this.tracker.getDataWatcher().d()) {
                         entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityMetadata(this.tracker.getId(), this.tracker.getDataWatcher(), true));
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java b/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java
index 7bae405..1b02d08 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java
@@ -12,7 +12,7 @@ import java.io.IOException; // CraftBukkit
 public class PacketPlayOutNamedEntitySpawn extends Packet {
 
     private int a;
-    private GameProfile b;
+    public GameProfile b; // CraftBukkit - private -> public
     private int c;
     private int d;
     private int e;
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
index 34986a0..d346b9b 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import java.io.IOException;
+
 public class PacketPlayOutPlayerInfo extends Packet {
 
     // CraftBukkit - change all fields to public
@@ -15,13 +17,13 @@ public class PacketPlayOutPlayerInfo extends Packet {
         this.c = i;
     }
 
-    public void a(PacketDataSerializer packetdataserializer) {
+    public void a(PacketDataSerializer packetdataserializer) throws IOException { // Kyoka
         this.a = packetdataserializer.c(16);
         this.b = packetdataserializer.readBoolean();
         this.c = packetdataserializer.readShort();
     }
 
-    public void b(PacketDataSerializer packetdataserializer) {
+    public void b(PacketDataSerializer packetdataserializer) throws IOException { // Kyoka
         packetdataserializer.a(this.a);
         packetdataserializer.writeBoolean(this.b);
         packetdataserializer.writeShort(this.c);
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
index 35d3be1..0b638fa 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
@@ -6,13 +6,14 @@ import java.util.Iterator;
 
 public class PacketPlayOutScoreboardTeam extends Packet {
 
-    private String a = "";
-    private String b = "";
-    private String c = "";
-    private String d = "";
-    private Collection e = new ArrayList();
-    private int f;
-    private int g;
+    // CraftBukkit - change all fields to public
+    public String a = "";
+    public String b = "";
+    public String c = "";
+    public String d = "";
+    public Collection e = new ArrayList();
+    public int f;
+    public int g;
 
     public PacketPlayOutScoreboardTeam() {}
 
@@ -43,7 +44,7 @@ public class PacketPlayOutScoreboardTeam extends Packet {
         }
     }
 
-    public void a(PacketDataSerializer packetdataserializer) {
+    public void a(PacketDataSerializer packetdataserializer) throws java.io.IOException { // CraftBukkit - added throws
         this.a = packetdataserializer.c(16);
         this.f = packetdataserializer.readByte();
         if (this.f == 0 || this.f == 2) {
@@ -62,7 +63,7 @@ public class PacketPlayOutScoreboardTeam extends Packet {
         }
     }
 
-    public void b(PacketDataSerializer packetdataserializer) {
+    public void b(PacketDataSerializer packetdataserializer) throws java.io.IOException { // CraftBukkit - added throws
         packetdataserializer.a(this.a);
         packetdataserializer.writeByte(this.f);
         if (this.f == 0 || this.f == 2) {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index ec45c30..9dfba97 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -22,7 +22,9 @@ import java.io.UnsupportedEncodingException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 import java.util.HashSet;
+import java.util.Arrays;
 
+import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
@@ -734,6 +736,90 @@ public class PlayerConnection implements PacketPlayInListener {
             PacketPlayOutSpawnPosition packet6 = (PacketPlayOutSpawnPosition) packet;
             this.player.compassTarget = new Location(this.getPlayer().getWorld(), packet6.x, packet6.y, packet6.z);
         }
+
+        if (packet instanceof PacketPlayOutScoreboardTeam) {
+            // Translate fake names in team info packets
+            Player viewer = this.getPlayer();
+            if (viewer != null) {
+                PacketPlayOutScoreboardTeam oldPacket = (PacketPlayOutScoreboardTeam) packet;
+
+                if (oldPacket.e.size() == 1) {
+                    // Handle single player team change more efficiently
+                    String realName = (String) oldPacket.e.iterator().next();
+                    String fakeName;
+                    Player player = this.server.getPlayer(realName);
+
+                    if (player != null && (fakeName = player.kyoka().getFakeName(viewer)) != null) {
+                        PacketPlayOutScoreboardTeam newPacket = new PacketPlayOutScoreboardTeam();
+
+                        newPacket.a = oldPacket.a;
+                        newPacket.b = oldPacket.b;
+                        newPacket.c = oldPacket.c;
+                        newPacket.d = oldPacket.d;
+                        newPacket.e = Arrays.asList(fakeName);
+                        newPacket.f = oldPacket.f;
+                        newPacket.g = oldPacket.g;
+
+                        packet = newPacket;
+                    }
+
+                } else if (oldPacket.e.size() > 1) {
+                    ArrayList<String> newNames = null;
+
+                    for (Object o : oldPacket.e) {
+                        String realName = (String) o;
+                        String fakeName;
+                        Player player = this.server.getPlayer(realName);
+
+                        if (player != null && (fakeName = player.kyoka().getFakeName(viewer)) != null) {
+                            if (newNames == null) {
+                                // Once we've found a fake name, create the new name list
+                                // and copy the names we've already looped over. If there
+                                // are no fake names, no lists are created and the packet
+                                // is not replaced.
+                                newNames = new ArrayList<String>(oldPacket.e.size());
+                                for (Object oo : oldPacket.e) {
+                                    if (oo == o) break;
+                                    newNames.add((String) oo);
+                                }
+                            }
+
+                            newNames.add(fakeName);
+                        } else if (newNames != null) {
+                            newNames.add(realName);
+                        }
+                    }
+
+                    if (newNames != null) {
+                        PacketPlayOutScoreboardTeam newPacket = new PacketPlayOutScoreboardTeam();
+
+                        newPacket.a = oldPacket.a;
+                        newPacket.b = oldPacket.b;
+                        newPacket.c = oldPacket.c;
+                        newPacket.d = oldPacket.d;
+                        newPacket.e = newNames;
+                        newPacket.f = oldPacket.f;
+                        newPacket.g = oldPacket.g;
+
+                        packet = newPacket;
+                    }
+                }
+            }
+
+        } else if (packet instanceof PacketPlayOutPlayerInfo) {
+            // Translate fake names in player list packets
+            Player viewer = this.getPlayer();
+            if (viewer != null) {
+                PacketPlayOutPlayerInfo oldPacket = (PacketPlayOutPlayerInfo) packet;
+                Player player = this.server.getPlayer(oldPacket.a);
+                String fakeName;
+                if(player != null && (fakeName = player.kyoka().getFakeName(viewer)) != null) {
+                    packet = new PacketPlayOutPlayerInfo(fakeName, oldPacket.b, oldPacket.c);
+                }
+            }
+
+        }
+
         // CraftBukkit end
 
         try {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 39b96db..ddc31df 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -503,15 +503,15 @@ public final class CraftServer implements Server {
 
     @Override
     @Deprecated
-    public Player getPlayer(final String name) {
+    public Player getPlayer(final String name, final CommandSender viewer) {
         Validate.notNull(name, "Name cannot be null");
 
         Player found = null;
         String lowerName = name.toLowerCase();
         int delta = Integer.MAX_VALUE;
         for (Player player : getOnlinePlayers()) {
-            if (player.getName().toLowerCase().startsWith(lowerName)) {
-                int curDelta = player.getName().length() - lowerName.length();
+            if (player.getName(viewer).toLowerCase().startsWith(lowerName)) {
+                int curDelta = player.getName(viewer).length() - lowerName.length();
                 if (curDelta < delta) {
                     found = player;
                     delta = curDelta;
@@ -524,13 +524,13 @@ public final class CraftServer implements Server {
 
     @Override
     @Deprecated
-    public Player getPlayerExact(String name) {
+    public Player getPlayerExact(String name, final CommandSender viewer) {
         Validate.notNull(name, "Name cannot be null");
 
         String lname = name.toLowerCase();
 
         for (Player player : getOnlinePlayers()) {
-            if (player.getName().equalsIgnoreCase(lname)) {
+            if (player.getName(viewer).equalsIgnoreCase(lname)) {
                 return player;
             }
         }
@@ -561,13 +561,13 @@ public final class CraftServer implements Server {
 
     @Override
     @Deprecated
-    public List<Player> matchPlayer(String partialName) {
+    public List<Player> matchPlayer(String partialName, final CommandSender viewer) {
         Validate.notNull(partialName, "PartialName cannot be null");
 
         List<Player> matchedPlayers = new ArrayList<Player>();
 
         for (Player iterPlayer : this.getOnlinePlayers()) {
-            String iterPlayerName = iterPlayer.getName();
+            String iterPlayerName = iterPlayer.getName(viewer);
 
             if (partialName.equalsIgnoreCase(iterPlayerName)) {
                 // Exact match
@@ -585,6 +585,21 @@ public final class CraftServer implements Server {
     }
 
     @Override
+    public Player getPlayer(String name) {
+        return this.getPlayer(name, null);
+    }
+
+    @Override
+    public Player getPlayerExact(String name) {
+        return this.getPlayerExact(name, null);
+    }
+
+    @Override
+    public List<Player> matchPlayer(String name) {
+        return this.matchPlayer(name, null);
+    }
+
+    @Override
     public int getMaxPlayers() {
         return playerList.getMaxPlayers();
     }
@@ -1694,8 +1709,8 @@ public final class CraftServer implements Server {
         PlayerChatTabCompleteEvent event = new PlayerChatTabCompleteEvent(player, message, completions);
         String token = event.getLastToken();
         for (Player p : getOnlinePlayers()) {
-            if (player.canSee(p) && StringUtil.startsWithIgnoreCase(p.getName(), token)) {
-                completions.add(p.getName());
+            if (player.canSee(p) && StringUtil.startsWithIgnoreCase(p.getName(player), token)) {
+                completions.add(p.getName(player));
             }
         }
         pluginManager.callEvent(event);
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
index 1314c74..8f875ca 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
@@ -68,4 +68,9 @@ public abstract class ServerCommandSender implements CommandSender {
     public Server getServer() {
         return Bukkit.getServer();
     }
+
+    @Override
+    public String getName(CommandSender viewer) {
+        return this.getName();
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
index 4c23727..75169ae 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
@@ -56,6 +56,11 @@ public class CraftMinecartCommand extends CraftMinecart implements CommandMineca
     }
 
     @Override
+    public String getName(org.bukkit.command.CommandSender viewer) {
+        return this.getName();
+    }
+
+    @Override
     public boolean isOp() {
         return true;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index caf6b42..ff5d4b6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1,18 +1,13 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.google.common.base.Objects;
 import com.google.common.collect.ImmutableSet;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -28,6 +23,7 @@ import org.bukkit.Statistic;
 import org.bukkit.Material;
 import org.bukkit.Statistic.Type;
 import org.bukkit.World;
+import org.bukkit.command.CommandSender;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.conversations.Conversation;
 import org.bukkit.conversations.ConversationAbandonedEvent;
@@ -69,6 +65,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private boolean scaledHealth = false;
     private double healthScale = 20;
 
+    private final Map<CommandSender, String> fakeNames = new WeakHashMap<>();
+    private final Map<CommandSender, String> fakeDisplayNames = new WeakHashMap<>();
+
     public CraftPlayer(CraftServer server, EntityPlayer entity) {
         super(server, entity);
 
@@ -191,11 +190,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         // Collisions will make for invisible people
-        for (int i = 0; i < server.getHandle().players.size(); ++i) {
-            if (((EntityPlayer) server.getHandle().players.get(i)).listName.equals(name)) {
-                throw new IllegalArgumentException(name + " is already assigned as a player list name for someone");
+        // Kyoka start
+        for (Player other : this.server.getOnlinePlayers()) {
+            if (name.equals(other.getPlayerListName())) {
+                throw new IllegalArgumentException(name + " is already used by another player");
+            }
+            if (!((CraftPlayer) other).fakeNames.isEmpty()) {
+                throw new IllegalArgumentException("Cannot set list name if any players have fake names");
             }
         }
+        // Kyoka end
 
         getHandle().listName = name;
 
@@ -1116,6 +1120,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     public void disconnect(String reason) {
+        kyoka.clearFakeNames(); // Kyoka
         conversationTracker.abandonAllConversations();
         perm.clearPermissions();
     }
@@ -1312,15 +1317,195 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     // Kyoka start
+    CraftPlayer cPlayer = this;
     private final Kyoka kyoka = new Kyoka() {
         @Override
         public String getLocale() {
             return getHandle().locale;
         }
+
+        @Override
+        public boolean hasFakeName(CommandSender viewer) {
+            return viewer != null && cPlayer.fakeNames.containsKey(viewer);
+        }
+
+        @Override
+        public void clearFakeNames() {
+            Set<CommandSender> viewers = new HashSet<>(cPlayer.fakeNames.keySet());
+
+            for (CommandSender viewer : viewers) {
+                this.removeNameOnClient(viewer);
+            }
+
+            cPlayer.fakeNames.clear();
+
+            for (CommandSender viewer : viewers) {
+                this.refreshEntityOnClient(viewer);
+                this.addNameOnClient(viewer);
+            }
+        }
+
+        @Override
+        public String getFakeName(CommandSender viewer) {
+            return viewer == null ? null : cPlayer.fakeNames.get(viewer);
+        }
+
+        @Override
+        public void setFakeName(CommandSender viewer, String newName) {
+            String oldName = cPlayer.fakeNames.get(viewer);
+            if (Objects.equal(oldName, newName)) {
+                return;
+            }
+
+            String realName = cPlayer.getName();
+
+            if (newName != null) {
+                if (!realName.equals(cPlayer.getPlayerListName())) {
+                    throw new IllegalArgumentException("Cannot set a fake name if player list name has been changed");
+                }
+
+                if (newName.length() > 16) {
+                    throw new IllegalArgumentException("Fake player names are limited to 16 characters in length");
+                }
+
+                // Do not let the fake name collide with any other player's real name,
+                // or any other fake name set for the same viewer.
+                for (Player other : cPlayer.getServer().getOnlinePlayers()) {
+                    if (!other.equals(cPlayer) && (newName.equals(other.getName()) || newName.equals(other.getName(viewer)))) {
+                        throw new IllegalArgumentException(newName + " is already in use by another player");
+                    }
+                }
+            }
+
+            this.removeNameOnClient(viewer);
+
+            if (newName == null) {
+                cPlayer.fakeNames.remove(viewer);
+            } else {
+                cPlayer.fakeNames.put(viewer, newName);
+            }
+
+            this.refreshEntityOnClient(viewer);
+            this.addNameOnClient(viewer);
+        }
+
+        /**
+         * Remove cPlayer player from the given viewer's scoreboard and player list.
+         */
+        private void removeNameOnClient(CommandSender viewer) {
+            if (viewer instanceof CraftPlayer) {
+                CraftPlayer craftViewer = (CraftPlayer) viewer;
+                EntityPlayer viewerEntity = craftViewer.getHandle();
+                if (viewerEntity.playerConnection != null) {
+                    if (craftViewer.canSee(cPlayer)) {
+                        viewerEntity.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(cPlayer.getName(), false, 9999));
+                    }
+
+                    ScoreboardTeam team = craftViewer.getScoreboard().getHandle().getPlayerTeam(cPlayer.getName());
+                    if (team != null) {
+                        viewerEntity.playerConnection.sendPacket(new PacketPlayOutScoreboardTeam(team, Arrays.asList(cPlayer.getName()), 4));
+                    }
+                }
+            }
+        }
+
+        /**
+         * Add cPlayer player to the given viewer's scoreboard and player list.
+         */
+        private void addNameOnClient(CommandSender viewer) {
+            if (viewer instanceof CraftPlayer) {
+                CraftPlayer craftViewer = (CraftPlayer) viewer;
+                EntityPlayer viewerEntity = craftViewer.getHandle();
+                if (viewerEntity.playerConnection != null) {
+                    if (craftViewer.canSee(cPlayer)) {
+                        viewerEntity.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(cPlayer.getName(), true, cPlayer.getHandle().ping));
+                    }
+
+                    ScoreboardTeam team = craftViewer.getScoreboard().getHandle().getPlayerTeam(cPlayer.getName());
+                    if (team != null) {
+                        viewerEntity.playerConnection.sendPacket(new PacketPlayOutScoreboardTeam(team, Arrays.asList(cPlayer.getName()), 3));
+                    }
+                }
+            }
+        }
+
+        /**
+         * Destroy and respawn cPlayer player's entity on the given viewer's client
+         */
+        private void refreshEntityOnClient(CommandSender viewer) {
+            if (viewer instanceof CraftPlayer) {
+                CraftPlayer craftViewer = (CraftPlayer) viewer;
+                if (cPlayer.equals(craftViewer) || !craftViewer.canSee(cPlayer)) {
+                    return;
+                }
+
+                // Re-create the player entity with the new name
+                EntityPlayer viewerEntity = craftViewer.getHandle();
+                EntityTracker tracker = ((WorldServer) cPlayer.entity.world).tracker;
+                EntityTrackerEntry entry = (EntityTrackerEntry) tracker.trackedEntities.get(cPlayer.getHandle().getId());
+
+                if (entry != null) {
+                    entry.clear(viewerEntity);
+                    entry.updatePlayer(viewerEntity);
+                }
+            }
+        }
+
+        @Override
+        public boolean hasFakeDisplayName(CommandSender viewer) {
+            return cPlayer.fakeDisplayNames.containsKey(viewer);
+        }
+
+        @Override
+        public void clearFakeDisplayNames() {
+            cPlayer.fakeDisplayNames.clear();
+        }
+
+        @Override
+        public String getFakeDisplayName(CommandSender viewer) {
+            return viewer == null ? null : cPlayer.fakeDisplayNames.get(viewer);
+        }
+
+        @Override
+        public void setFakeDisplayName(CommandSender viewer, String name) {
+            if (name == null) {
+                cPlayer.fakeDisplayNames.remove(viewer);
+            } else {
+                cPlayer.fakeDisplayNames.put(viewer, name);
+            }
+        }
+
+        @Override
+        public String getPlayerListName(CommandSender viewer) {
+            String name = this.getFakeName(viewer);
+            if (name == null) {
+                name = cPlayer.getPlayerListName();
+            }
+            return name;
+        }
+
+        @Override
+        public String getDisplayName(CommandSender viewer) {
+            String name = this.getFakeDisplayName(viewer);
+            if (name == null) {
+                name = cPlayer.getDisplayName();
+            }
+            return name;
+        }
     };
 
+    @Override
+    public String getName(CommandSender viewer) {
+        String name = kyoka.getFakeName(viewer);
+        if (name == null) {
+            name = cPlayer.getName();
+        }
+        return name;
+    }
+
     public Kyoka kyoka() {
         return kyoka;
     }
+
     // Kyoka end
 }
-- 
1.9.1

