From 572475e451ea080d8bfc04dd56a124d4ff09a317 Mon Sep 17 00:00:00 2001
From: Jamie Shaw <lk@lkay.org>
Date: Fri, 4 Jul 2014 20:49:24 +1000
Subject: [PATCH] API: Custom visbility API for kit pvp servers


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 09c9c8e..a023647 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1889,4 +1889,16 @@ public abstract class Entity {
     }
 
     public void i(int i) {}
+
+    // Kyoka start
+    public IEntitySelector canSeeSelector = new IEntitySelector() {
+        @Override
+        public boolean a(Entity entity) {
+            if (!(entity instanceof EntityPlayer)) {
+                return true;
+            }
+            return ((EntityPlayer) entity).getBukkitEntity().canSeeEntity(getBukkitEntity());
+        }
+    };
+    // Kyoka end
 }
diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index 88b0751..c0cdd61 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -168,7 +168,7 @@ public class EntityArrow extends Entity implements IProjectile {
             }
 
             Entity entity = null;
-            List list = this.world.getEntities(this, this.boundingBox.a(this.motX, this.motY, this.motZ).grow(1.0D, 1.0D, 1.0D));
+            List list = this.world.getEntities(this, this.boundingBox.a(this.motX, this.motY, this.motZ).grow(1.0D, 1.0D, 1.0D), this.canSeeSelector); // Kyoka
             double d0 = 0.0D;
 
             int j;
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index c248139..601671b 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -532,6 +532,7 @@ public abstract class EntityHuman extends EntityLiving implements ICommandListen
         } else {
             EntityItem entityitem = new EntityItem(this.world, this.locX, this.locY - 0.30000001192092896D + (double) this.getHeadHeight(), this.locZ, itemstack);
 
+            entityitem.owner = this; // Kyoka
             entityitem.pickupDelay = 40;
             if (flag1) {
                 entityitem.b(this.getName());
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 394bfbf..834def0 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -17,6 +17,7 @@ public class EntityItem extends Entity {
     private String g;
     public float c;
     private int lastTick = MinecraftServer.currentTick; // CraftBukkit
+    public Entity owner; // Kyoka
 
     public EntityItem(World world, double d0, double d1, double d2) {
         super(world);
@@ -236,6 +237,11 @@ public class EntityItem extends Entity {
 
     public void b_(EntityHuman entityhuman) {
         if (!this.world.isStatic) {
+            // Kyoka start
+            if(!((EntityPlayer) entityhuman).getBukkitEntity().canSeeEntity(this.getBukkitEntity())) {
+                return;
+            }
+            // Kyoka end
             ItemStack itemstack = this.getItemStack();
             int i = itemstack.count;
 
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 0c63b2c..a44ad51 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -136,7 +136,7 @@ public abstract class EntityLiving extends Entity {
                     this.world.a((EntityHuman) this, 2006, i, j, k, MathHelper.f(this.fallDistance - 3.0F));
                     ((EntityPlayer) this).playerConnection.sendPacket(new PacketPlayOutWorldEvent(2006, i, j, k, MathHelper.f(this.fallDistance - 3.0F), false));
                 } else {
-                    this.world.triggerEffect(2006, i, j, k, MathHelper.f(this.fallDistance - 3.0F));
+                    this.world.a(this, 2006, i, j, k, MathHelper.f(this.fallDistance - 3.0F)); // Kyoka
                 }
                 // CraftBukkit end
             }
diff --git a/src/main/java/net/minecraft/server/EntityPotion.java b/src/main/java/net/minecraft/server/EntityPotion.java
index 69db29f..180abd2 100644
--- a/src/main/java/net/minecraft/server/EntityPotion.java
+++ b/src/main/java/net/minecraft/server/EntityPotion.java
@@ -66,7 +66,7 @@ public class EntityPotion extends EntityProjectile {
 
             if (true || list != null && !list.isEmpty()) { // CraftBukkit - Call event even if no effects to apply
                 AxisAlignedBB axisalignedbb = this.boundingBox.grow(4.0D, 2.0D, 4.0D);
-                List list1 = this.world.a(EntityLiving.class, axisalignedbb);
+                List list1 = this.world.a(EntityLiving.class, axisalignedbb, this.canSeeSelector); // Kyoka
 
                 if (list1 != null) { // CraftBukkit - Run code even if there are no entities around
                     Iterator iterator = list1.iterator();
@@ -130,7 +130,7 @@ public class EntityPotion extends EntityProjectile {
                 }
             }
 
-            this.world.triggerEffect(2002, (int) Math.round(this.locX), (int) Math.round(this.locY), (int) Math.round(this.locZ), this.getPotionValue());
+            this.world.a(this, 2002, (int) Math.round(this.locX), (int) Math.round(this.locY), (int) Math.round(this.locZ), this.getPotionValue()); // Kyoka
             this.die();
         }
     }
diff --git a/src/main/java/net/minecraft/server/EntityProjectile.java b/src/main/java/net/minecraft/server/EntityProjectile.java
index 7f8a33b..650005f 100644
--- a/src/main/java/net/minecraft/server/EntityProjectile.java
+++ b/src/main/java/net/minecraft/server/EntityProjectile.java
@@ -120,7 +120,7 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
 
         if (!this.world.isStatic) {
             Entity entity = null;
-            List list = this.world.getEntities(this, this.boundingBox.a(this.motX, this.motY, this.motZ).grow(1.0D, 1.0D, 1.0D));
+            List list = this.world.getEntities(this, this.boundingBox.a(this.motX, this.motY, this.motZ).grow(1.0D, 1.0D, 1.0D), this.canSeeSelector); // Kyoka
             double d0 = 0.0D;
             EntityLiving entityliving = this.getShooter();
 
diff --git a/src/main/java/net/minecraft/server/EntityThrownExpBottle.java b/src/main/java/net/minecraft/server/EntityThrownExpBottle.java
index 68625a4..7874fab 100644
--- a/src/main/java/net/minecraft/server/EntityThrownExpBottle.java
+++ b/src/main/java/net/minecraft/server/EntityThrownExpBottle.java
@@ -36,7 +36,7 @@ public class EntityThrownExpBottle extends EntityProjectile {
             org.bukkit.event.entity.ExpBottleEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callExpBottleEvent(this, i);
             i = event.getExperience();
             if (event.getShowEffect()) {
-                this.world.triggerEffect(2002, (int) Math.round(this.locX), (int) Math.round(this.locY), (int) Math.round(this.locZ), 0);
+                this.world.a(this, 2002, (int) Math.round(this.locX), (int) Math.round(this.locY), (int) Math.round(this.locZ), 0); // Kyoka
             }
             // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index a440042..5da7a80 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -305,13 +305,12 @@ public class EntityTrackerEntry {
 
             if (d0 >= (double) (-this.b) && d0 <= (double) this.b && d1 >= (double) (-this.b) && d1 <= (double) this.b) {
                 if (!this.trackedPlayers.contains(entityplayer) && (this.d(entityplayer) || this.tracker.attachedToPlayer)) {
-                    // CraftBukkit start - respect vanish API
-                    if (this.tracker instanceof EntityPlayer) {
-                        Player player = ((EntityPlayer) this.tracker).getBukkitEntity();
-                        if (!entityplayer.getBukkitEntity().canSee(player)) {
-                            return;
-                        }
+                    // Kyoka start
+                    if (!entityplayer.getBukkitEntity().canSeeEntity(this.tracker.getBukkitEntity())) {
+                        return;
                     }
+                    // Kyoka end
+                    // CraftBukkit start
 
                     entityplayer.removeQueue.remove(Integer.valueOf(this.tracker.getId()));
                     // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 22d7050..9a36001 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -1025,7 +1025,7 @@ public abstract class PlayerList {
             EntityPlayer entityplayer = (EntityPlayer) this.players.get(j);
 
             // CraftBukkit start - Test if player receiving packet can see the source of the packet
-            if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
+            if (entityhuman != null && !entityplayer.getBukkitEntity().canSeeEntity(entityhuman.getBukkitEntity())) { // Kyoka
                 continue;
             }
             // CraftBukkit end
@@ -1042,6 +1042,28 @@ public abstract class PlayerList {
         }
     }
 
+    // Kyoka start
+    public void sendPacketNearby(Entity entity, double d0, double d1, double d2, double d3, int i, Packet packet) {
+        for (int j = 0; j < this.players.size(); ++j) {
+            EntityPlayer entityplayer = (EntityPlayer) this.players.get(j);
+
+            if (entity != null && !entityplayer.getBukkitEntity().canSeeEntity(entity.getBukkitEntity())) {
+                continue;
+            }
+
+            if (entityplayer.dimension == i) {
+                double d4 = d0 - entityplayer.locX;
+                double d5 = d1 - entityplayer.locY;
+                double d6 = d2 - entityplayer.locZ;
+
+                if (d4 * d4 + d5 * d5 + d6 * d6 < d3 * d3) {
+                    entityplayer.playerConnection.sendPacket(packet);
+                }
+            }
+        }
+    }
+    // Kyoka end
+
     public void savePlayers() {
         for (int i = 0; i < this.players.size(); ++i) {
             this.b((EntityPlayer) this.players.get(i));
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 08c506c..4f7e9b5 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -907,7 +907,7 @@ public abstract class World implements IBlockAccess {
 
     public void makeSound(Entity entity, String s, float f, float f1) {
         for (int i = 0; i < this.u.size(); ++i) {
-            ((IWorldAccess) this.u.get(i)).a(s, entity.locX, entity.locY - (double) entity.height, entity.locZ, f, f1);
+            ((WorldManager) this.u.get(i)).a(entity, s, entity.locX, entity.locY - (double) entity.height, entity.locZ, f, f1); // Kyoka
         }
     }
 
@@ -917,6 +917,16 @@ public abstract class World implements IBlockAccess {
         }
     }
 
+    // Kyoka start
+    public void a(Entity entity, int i, int j, int k, int l, int i1) {
+
+        for (int j1 = 0; j1 < this.u.size(); ++j1) {
+            ((WorldManager) this.u.get(j1)).a(entity, i, j, k, l, i1);
+        }
+
+    }
+    // Kyoka end
+
     public void makeSound(double d0, double d1, double d2, String s, float f, float f1) {
         for (int i = 0; i < this.u.size(); ++i) {
             ((IWorldAccess) this.u.get(i)).a(s, d0, d1, d2, f, f1);
diff --git a/src/main/java/net/minecraft/server/WorldManager.java b/src/main/java/net/minecraft/server/WorldManager.java
index b349902..116d10a 100644
--- a/src/main/java/net/minecraft/server/WorldManager.java
+++ b/src/main/java/net/minecraft/server/WorldManager.java
@@ -22,10 +22,15 @@ public class WorldManager implements IWorldAccess {
         this.world.getTracker().untrackEntity(entity);
     }
 
+    // Kyoka start
     public void a(String s, double d0, double d1, double d2, float f, float f1) {
-        // CraftBukkit - this.world.dimension
-        this.server.getPlayerList().sendPacketNearby(d0, d1, d2, f > 1.0F ? (double) (16.0F * f) : 16.0D, this.world.dimension, new PacketPlayOutNamedSoundEffect(s, d0, d1, d2, f, f1));
+        this.server.getPlayerList().sendPacketNearby(null, d0, d1, d2, f > 1.0F ? (double) (16.0F * f) : 16.0D, this.world.dimension, new PacketPlayOutNamedSoundEffect(s, d0, d1, d2, f, f1));
+    }
+
+    public void a(Entity entity, String s, double d0, double d1, double d2, float f, float f1) {
+        this.server.getPlayerList().sendPacketNearby(entity, d0, d1, d2, f > 1.0F ? (double) (16.0F * f) : 16.0D, this.world.dimension, new PacketPlayOutNamedSoundEffect(s, d0, d1, d2, f, f1));
     }
+    // Kyoka end
 
     public void a(EntityHuman entityhuman, String s, double d0, double d1, double d2, float f, float f1) {
         // CraftBukkit - this.world.dimension
@@ -47,6 +52,12 @@ public class WorldManager implements IWorldAccess {
         this.server.getPlayerList().sendPacketNearby(entityhuman, (double) j, (double) k, (double) l, 64.0D, this.world.dimension, new PacketPlayOutWorldEvent(i, j, k, l, i1, false));
     }
 
+    // Kyoka start
+    public void a(Entity entity, int i, int j, int k, int l, int i1) {
+        this.server.getPlayerList().sendPacketNearby(entity, (double) j, (double) k, (double) l, 64.0D, this.world.dimension, new PacketPlayOutWorldEvent(i, j, k, l, i1, false));
+    }
+    // Kyoka end
+
     public void a(int i, int j, int k, int l, int i1) {
         this.server.getPlayerList().sendAll(new PacketPlayOutWorldEvent(i, j, k, l, i1, true));
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index f4dec5b..4df314a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -293,10 +293,16 @@ public class CraftWorld implements World {
         return world;
     }
 
+    // Kyoka start
     public org.bukkit.entity.Item dropItem(Location loc, ItemStack item) {
+        return dropItem(loc, item, null);
+    }
+
+    public org.bukkit.entity.Item dropItem(Location loc, ItemStack item, net.minecraft.server.Entity owner) {
         Validate.notNull(item, "Cannot drop a Null item.");
         Validate.isTrue(item.getTypeId() != 0, "Cannot drop AIR.");
         EntityItem entity = new EntityItem(world, loc.getX(), loc.getY(), loc.getZ(), CraftItemStack.asNMSCopy(item));
+        entity.owner = owner;
         entity.pickupDelay = 10;
         world.addEntity(entity);
         // TODO this is inconsistent with how Entity.getBukkitEntity() works.
@@ -305,6 +311,10 @@ public class CraftWorld implements World {
     }
 
     public org.bukkit.entity.Item dropItemNaturally(Location loc, ItemStack item) {
+        return dropItemNaturally(loc, item, null);
+    }
+
+    public org.bukkit.entity.Item dropItemNaturally(Location loc, ItemStack item, net.minecraft.server.Entity owner) {
         double xs = world.random.nextFloat() * 0.7F + (1.0F - 0.7F) * 0.5D;
         double ys = world.random.nextFloat() * 0.7F + (1.0F - 0.7F) * 0.5D;
         double zs = world.random.nextFloat() * 0.7F + (1.0F - 0.7F) * 0.5D;
@@ -312,8 +322,9 @@ public class CraftWorld implements World {
         loc.setX(loc.getX() + xs);
         loc.setY(loc.getY() + ys);
         loc.setZ(loc.getZ() + zs);
-        return dropItem(loc, item);
+        return dropItem(loc, item, owner);
     }
+    // Kyoka end
 
     public Arrow spawnArrow(Location loc, Vector velocity, float speed, float spread) {
         Validate.notNull(loc, "Can not spawn arrow with a null location");
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index dc8b2ec..4bc2b3d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -7,13 +7,7 @@ import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -46,6 +40,7 @@ import org.bukkit.craftbukkit.map.RenderData;
 import org.bukkit.craftbukkit.scoreboard.CraftScoreboard;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerGameModeChangeEvent;
@@ -67,6 +62,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private final ConversationTracker conversationTracker = new ConversationTracker();
     private final Set<String> channels = new HashSet<String>();
     private final Set<UUID> hiddenPlayers = new HashSet<UUID>();
+    private final Set<Player> kyokaHiddenPlayers = Collections.newSetFromMap(new WeakHashMap<Player , Boolean>());
     private int hash = 0;
     private double health = 20;
     private boolean scaledHealth = false;
@@ -930,6 +926,31 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return !hiddenPlayers.contains(player.getUniqueId());
     }
 
+    // Kyoka start
+    public boolean canSeeEntity(Entity entity) {
+        net.minecraft.server.Entity nmsEntity = ((CraftEntity) entity).getHandle();
+        if (nmsEntity instanceof EntityProjectile) {
+            EntityProjectile entityProjectile = (EntityProjectile) nmsEntity;
+            if (entityProjectile.getShooter() instanceof EntityPlayer && !((EntityPlayer)entityProjectile.getShooter()).getBukkitEntity().kyoka().canSee(this)) {
+                return false;
+            }
+        } else if (nmsEntity instanceof EntityArrow) {
+            EntityArrow entityArrow = (EntityArrow) nmsEntity;
+
+            if (entityArrow.shooter instanceof EntityPlayer && !((EntityPlayer)entityArrow.shooter).getBukkitEntity().kyoka().canSee(this)) {
+                return false;
+            }
+
+        } else if (nmsEntity instanceof EntityItem) {
+            EntityItem entityItem = (EntityItem) nmsEntity;
+            if (entityItem.owner instanceof EntityPlayer && kyokaHiddenPlayers.contains(entityItem.owner.getBukkitEntity())) {
+                return false;
+            }
+        }
+        return !hiddenPlayers.contains(entity.getUniqueId()) && !kyokaHiddenPlayers.contains(entity);
+    }
+    // Kyoka end
+
     public Map<String, Object> serialize() {
         Map<String, Object> result = new LinkedHashMap<String, Object>();
 
@@ -1304,6 +1325,43 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         public String getLocale() {
             return getHandle().locale;
         }
+
+        @Override
+        public void hidePlayer(Player player) {
+            Validate.notNull(entity, "hidden player cannot be null");
+            if (getHandle().playerConnection == null) return;
+            if (CraftPlayer.this.equals(player)) return;
+            if (!canSee(player)) return;
+            kyokaHiddenPlayers.add(player);
+
+            EntityTracker tracker = ((WorldServer) entity.world).tracker;
+            EntityPlayer other = ((CraftPlayer) player).getHandle();
+            EntityTrackerEntry entry = (EntityTrackerEntry) tracker.trackedEntities.get(other.getId());
+            if (entry != null) {
+                entry.clear(getHandle());
+            }
+        }
+
+        @Override
+        public void showPlayer(Player player) {
+            Validate.notNull(entity, "shown player cannot be null");
+            if (getHandle().playerConnection == null) return;
+            if (CraftPlayer.this.equals(player)) return;
+            if (canSee(player)) return;
+            kyokaHiddenPlayers.remove(player);
+
+            EntityTracker tracker = ((WorldServer) entity.world).tracker;
+            EntityPlayer other = ((CraftPlayer) player).getHandle();
+            EntityTrackerEntry entry = (EntityTrackerEntry) tracker.trackedEntities.get(other.getId());
+            if (entry != null && !entry.trackedPlayers.contains(getHandle())) {
+                entry.updatePlayer(getHandle());
+            }
+        }
+
+        @Override
+        public boolean canSee(Player player) {
+            return !kyokaHiddenPlayers.contains(player);
+        }
     };
 
     public Kyoka kyoka() {
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 9b10c41..cd78e15 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -366,7 +366,7 @@ public class CraftEventFactory {
         for (org.bukkit.inventory.ItemStack stack : event.getDrops()) {
             if (stack == null || stack.getType() == Material.AIR || stack.getAmount() == 0) continue;
 
-            world.dropItemNaturally(entity.getLocation(), stack);
+            ((CraftWorld) world).dropItemNaturally(entity.getLocation(), stack, victim); // Kyoka
         }
 
         return event;
-- 
1.9.4.msysgit.2

